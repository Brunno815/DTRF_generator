#!/bin/bash 
# Get configs
SOURCE_CONFIG="`pwd`/run_synth.config"
source $SOURCE_CONFIG

# Start log
echo -e "\n\n****************************************************\n" | tee -a $SYNTH_LOG_FILENAME
echo -e "Script execution start: `date +%d_%b-%H_%M_%S`" | tee -a $SYNTH_LOG_FILENAME
echo -e "\n****************************************************\n" | tee -a $SYNTH_LOG_FILENAME

################################
# Execute synthesis function
################################
function execute_synth {
    # get arguments
    line_arch=$1
    export SYNTH_CLK_PERIOD=$2
    #export DESIGN_NAME=$1
 
    echo ${SYNTH_CLK_PERIOD}   
    echo "OI synth"
    # Select the current architecture
    export CURRENT_ARCH="$line_arch"
    echo -e "Current clock period constraint: ${SYNTH_CLK_PERIOD} ns"
    echo -e "\nArchitecture '$CURRENT_ARCH' selected."
    echo -e "\nStarting synthesis...\n\n"
    # Modify the name to put the preserve flag in the folder name
    #line_arch=`echo $line_arch | sed -r "s/_[0-9]+-/_$PRESERVE_FLAG&/g"`

    COMB_EFFORT="${GENERIC_EFFORT:0:1}${MAP_EFFORT:0:1}${OPT_EFFORT:0:1}"
    COMB_EFFORT="${COMB_EFFORT^^}"
    
    dest_synth_dir="synthesis_RTL_${line_arch//./_}_MVT_${ENABLE_MULTI_VT}_VDD_${SYNTH_VDD}_HAFA_${ENABLE_HA_FA}_EFFORT_${COMB_EFFORT}_C${SYNTH_CLK_PERIOD}"
    cd $SYNTH_ROOT
    mkdir -p $dest_synth_dir && cd $dest_synth_dir
    
    # Check if synthesis is needed
    if [ $SKIP_SYNTH_IF_PRESENT == true ]; then
        present_qor=`find . -type f -name "${DESIGN_NAME}_qor.rpt" | wc -l`
        if [ $present_qor -gt 0 ]; then
            echo -e "Synthesis already done. Skiping architecture '`echo $1 | cut -d/ -f 5-7`'"
            exit
        fi
    fi
    
    if [ $RESYNTHETIZE == false ]; then
        export CURRENT_HDL_FOLDER="${RTL_ROOT}/${line_arch}"
        echo $CURRENT_HDL_FOLDER
    else
        export CURRENT_HDL_FILE="${SYNTH_ROOT}/${dest_synth_dir}/outputs/${DESIGN_NAME}.v"
    fi
    export BASE_SIM_FILENAME="${line_arch//./_}_MVT_${ENABLE_MULTI_VT}_VDD_${SYNTH_VDD}_HAFA_${ENABLE_HA_FA}_EFFORT_${COMB_EFFORT}_C${SYNTH_CLK_PERIOD}"
    
    /bin/bash -c "source /lab215/scripts/set_cadence.bash; genus -legacy_ui -file ${TCL_ROOT}/template_lp_vhdl.tcl"
    
    # check if the synthesis finished
    synth_finished=`find . -name reports | wc -l`
    if [ $synth_finished -le 0 ]; then
        echo -e "Error in synthesis, stopping..."
        exit 1
    fi
   
    if [ $RESYNTHETIZE == false ]; then

        /bin/bash -c "source /lab215/scripts/set_cadence.bash; cd outputs; ncsdfc ${DESIGN_NAME}.sdf"
    
        # Create the SDF command file
        echo -e "COMPILED_SDF_FILE = \"${SYNTH_ROOT}/${dest_synth_dir}/outputs/${DESIGN_NAME}.sdf.X\"," > outputs/sdf_cmd_file
        echo -e "LOG_FILE = \"sdf.log\"," >> outputs/sdf_cmd_file
        echo -e "SCOPE = ${TESTBENCH_TOP}:${TESTBENCH_INST}," >> outputs/sdf_cmd_file
        echo -e "MTM_CONTROL = \"MAXIMUM\"," >> outputs/sdf_cmd_file
        echo -e "SCALE_FACTORS = \"1.0:1.0:1.0\"," >> outputs/sdf_cmd_file
        echo -e "SCALE_TYPE = \"FROM_MAXIMUM\";" >> outputs/sdf_cmd_file


    fi
}

################################
# Help message function
################################
usage() {
    echo -e "Usage: `basename $0` [OPTIONS]" 1>&2
    echo -e "\nGlobal options:"
    echo -e "\t -j, --jobs VALUE: maximum processes in parallel"
    echo -e "\t -h, --help:       shows this message"
    echo -e "\t -d, --debug:      enables debugging (stop on error)"
    echo -e "Synthesis options:"
    echo -e "\t -a, --all:                all architectures will be synthetized"
    echo -e "\t -A, --architecture ARCH:  specify the architecture to be synthetized"
    echo -e "\t -m, --multi-clk:          synthetize for a list of clock periods"
    echo -e "\t -f, --clocks-file:        specify the clock period constraint file [default: synth_clk.list]"
    echo -e "\t -p, --clock-period VALUE: clock period constraint for synthesis"
    echo -e "\t -x, --skip-synthesis:     skip synthesis if architecture is already synthetized (should be disable for VCD power estimation)"
    echo -e "\t -e, --disable-adders:     disable library HAs and FAs"
    echo -e "\t -v, --multi-vt:           enable Multi-VT optimization"
    echo -e "\t -t, --vdd VALUE:          set the operating VDD value"
    echo -e "\t -g, --clock-gating:       activate clock gating support"
    echo -e "\t -r, --resynthesize        resynthesize the design from a netlist to speed the power estimation flow"
    echo -e "Cleanup options:"
    echo -e "\t -c, --clean:              clean everything"
}

export -f execute_synth

################################
# Parse arguments
################################
# Get arguments
inputOptions=$(getopt -o "${ShortOpts}" --long "${LongOpts}" \
    --name "${ScriptName}" -- "${@}")

if [[ ($? -ne 0) || ($# -eq 0) ]]; then
    usage
    exit $E_OPTERR
fi

# Process arguments
eval set -- "${inputOptions}"

while true; do
    case "${1}" in
        -h|--help)
            usage
            exit 0;;
        -d|--debug)
            $DEBUG_MODE=true;;
        -c|--clean)
            CLEAN_ALL=true;;
        -a|--all)
            ALL_ARCHS=true;;
        -A|--architecture)
            ARCH_NAMES+="$2 "
            shift;;
        -j|--jobs)
            MAX_PROCS=$2
            shift;;
        -p|--clock-period)
            CLK_PARAM=$2
            shift;;
        -m|--multi-clk)
            MULTI_CLK=true;;
        -r|--resynthetize)
            export RESYNTHETIZE=true;;
        -f|--clocks-file)
            SYNTH_CLK_FILE_PATH=$2
            shift;;
        -x|--skip-synthesis)
            export SKIP_SYNTH_IF_PRESENT=true;;
        -e|--disable-adders)
            export ENABLE_HA_FA=false;;
        -v|--multi-vt)
            export ENABLE_MULTI_VT=true;;
        -t|--vdd)
            export SYNTH_VDD=$2
            shift;;
        -g|--clock-gating)
            export ENABLE_CLOCK_GATING=true;;
        --)
            shift
            break;;
        *)
            echo -e "Invalid parameter!"
            usage
            exit -2;;
    esac
    shift
done
# Goes to the next argument
shift $((OPTIND-1))

if [ $DEBUG_MODE == true ]; then
    echo -e "WARNING: Debug mode enabled.\n"
fi

export ARCH_NAMES="ARCH_DECISION";

# Check if specific architectures were specified
if [ $ALL_ARCHS == false ]; then
    # Get all specified architectures
    for current_arch in $ARCH_NAMES
    do
        numberOfArchs=`find ${RTL_ROOT} -maxdepth 1 -type d -name "*$current_arch*" | wc -l`
        echo $numberOfArchs
        if [ $numberOfArchs -gt 0 ]; then
            ARCH_LIST+="`find ${RTL_ROOT} -maxdepth 1 -type d -name \"*$current_arch*\" -exec sh -c 'echo $(basename {})' \;` "
            ((ARCH_COUNT+=$numberOfArchs))
        else
            echo -e "Architecture ${current_arch} files not found."
        fi
    done
else
    # Search the path
    for current_path in $RTL_ROOT/*
    do
        # Analyse only those files with 'arch' in the filename
        read_arch=`basename $current_path`
        # Avoid empty strings
        if [ ! -z "$read_arch" -a "$read_arch" != " " ]; then
            ARCH_LIST+="$read_arch "
            ((ARCH_COUNT+=1))
        fi
    done
fi

echo -e "Number of available architectures: $ARCH_COUNT."

if [ $CLEAN_ALL == true ]; then
    find $DESIGN_ROOT -mindepth 1 -type d -name "reports" | xargs --max-args=1 -I{} --max-procs=${MAX_PROCS} rm -rf {}
else
    # Create synth dir
    mkdir -p $SYNTH_ROOT

    # Synthetize all architectures defined in the arch_file
    if [ "$ARCH_COUNT" -ne 0 ]; then
        # Show available architectures
        for line_arch in $ARCH_LIST
        do
            echo -e "\t* $line_arch"
        done

        # Generate the nets report
        export PRINT_NETS=true
        # Populate the clock list
        if [ $MULTI_CLK == true ]; then
            while read line_clk
            do
                SYNTH_CLK_LIST+="$line_clk "
            done < "$SYNTH_CLK_FILE_PATH"
        elif [ -z "$CLK_PARAM" ]; then
            SYNTH_CLK_LIST=0.400
        else
            SYNTH_CLK_LIST=$CLK_PARAM
        fi
           
        echo -e "Synthetizing all architectures..."
        for line_clk in $SYNTH_CLK_LIST
        do
            for current_arch in $ARCH_LIST
            do
                COMMAND_LIST+="$current_arch $line_clk|"
                ((NUMBER_OF_SYNTHESIS+=1))
            done
        done
        
        echo -e "=> Number of synthesis to be executed: ${NUMBER_OF_SYNTHESIS}\n"
        #Execute synth
        echo $COMMAND_LIST | sed -r 's/\|/\n/g' | xargs --max-args=1 -L 1 -I{} --max-procs=${MAX_PROCS} /bin/bash -c 'execute_synth {}'
    else
        echo "There is no available architectures!. Aborting...."
        exit -1
    fi
fi
